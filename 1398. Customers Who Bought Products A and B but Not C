Table: Customers

+---------------------+---------+
| Column Name         | Type    |
+---------------------+---------+
| customer_id         | int     |
| customer_name       | varchar |
+---------------------+---------+
customer_id is the primary key for this table.
customer_name is the name of the customer.
 

Table: Orders

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| order_id      | int     |
| customer_id   | int     |
| product_name  | varchar |
+---------------+---------+
order_id is the primary key for this table.
customer_id is the id of the customer who bought the product "product_name".
 

Write an SQL query to report the customer_id and customer_name of customers who bought products "A", "B" but did not buy the product "C" since we want to recommend them to purchase this product.

Return the result table ordered by customer_id.

The query result format is in the following example.

 

Example 1:

Input: 
Customers table:
+-------------+---------------+
| customer_id | customer_name |
+-------------+---------------+
| 1           | Daniel        |
| 2           | Diana         |
| 3           | Elizabeth     |
| 4           | Jhon          |
+-------------+---------------+
Orders table:
+------------+--------------+---------------+
| order_id   | customer_id  | product_name  |
+------------+--------------+---------------+
| 10         |     1        |     A         |
| 20         |     1        |     B         |
| 30         |     1        |     D         |
| 40         |     1        |     C         |
| 50         |     2        |     A         |
| 60         |     3        |     A         |
| 70         |     3        |     B         |
| 80         |     3        |     D         |
| 90         |     4        |     C         |
+------------+--------------+---------------+
Output: 
+-------------+---------------+
| customer_id | customer_name |
+-------------+---------------+
| 3           | Elizabeth     |
+-------------+---------------+
Explanation: Only the customer_id with id 3 bought the product A and B but not the product C.





-- not C -> count(c)=0
-- both A and B -> count(in a, b)=2
select customer_id, customer_name from Customers c 
where (select count(product_name) from Orders where customer_id = c.customer_id and product_name in('A', 'B')) = 2
and (select count(product_name) from Orders where customer_id = c.customer_id and product_name = 'C') = 0;


# Write your MySQL query statement below
    
with cte as (
select customer_id,
sum(case when product_name='A' then 1 else 0 end) as cnt_A,
sum(case when product_name='B' then 1 else 0 end) as cnt_B,
sum(case when product_name='C' then 1 else 0 end) as cnt_C
from orders    -- get cnt per product per customer
group by customer_id
)

select cte.customer_id,
    c.customer_name
from cte
join customers c
    on cte.customer_id=c.customer_id
where cte.cnt_A>0 and cte.cnt_B>0 and cte.cnt_C=0   -- A,B>0 and C=0
order by cte.customer_id
